/*
 * Copyright Â© 2015 Universidad Icesi
 * 
 * This file is part of the Amelia DSL.
 * 
 * The Amelia DSL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * The Amelia DSL is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Amelia DSL. If not, see <http://www.gnu.org/licenses/>.
 */
grammar org.amelia.dsl.Amelia with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate amelia "http://www.amelia.org/dsl/Amelia"

Model
	:	('package' name = QualifiedName ->';'?)?
		importSection = XImportSection?
		typeDeclaration = TypeDeclaration?
	;

TypeDeclaration
	:	SubsystemDeclaration
	;

SubsystemDeclaration returns Subsystem
	:	extensions = ExtensionSection?
		'subsystem' ^fragment ?= 'fragment'? name = ID body = SubsystemBlockExpression
	;

ExtensionSection
	:	declarations += ExtensionDeclaration+
	;

ExtensionDeclaration
	:	DependDeclaration
	|	IncludeDeclaration
	;

IncludeDeclaration
	:	'includes' element = [TypeDeclaration | QualifiedName] ->';'?
	;

DependDeclaration
	:	'depends' 'on' element = [TypeDeclaration | QualifiedName] ->';'?
	;

SubsystemBlockExpression
	:	{SubsystemBlockExpression} '{' (expressions += InternalSubsystemDeclaration)* '}'
	;

InternalSubsystemDeclaration
	:	VariableDeclaration ->';'?
	|	OnHostBlockExpression
	;

VariableDeclaration
	:	{VariableDeclaration}
		(writeable?='var'|'val') (=> (type = JvmTypeReference name = ValidID) | name = ValidID) ('=' right = XExpression)?
	;

OnHostBlockExpression
	:	'on' '(' hosts += XExpression (',' hosts += XExpression)* ')' '{' (rules += RuleDeclaration)* '}'
	;

RuleDeclaration
	:	name = ID ':' 
		(=> (dependencies += [RuleDeclaration | QualifiedName] (',' dependencies += [RuleDeclaration | QualifiedName])*)? ';')?
		(commands += XExpression)*
	;

CdCommand
	:	'cd' directory = XExpression (=> initializedLater ?= '...')?
	;

CompileCommand
	:	'compile' source = XExpression output = XExpression
		(=> '-classpath' classpath = XExpression)?
		(=> initializedLater ?= '...')?
	;


// TODO: turn command parameters into: 
// parameters += CommandParam (name = PARAM_NAME value = XExpression)
RunCommand
	:
		'run' (hasPort ?= '-r' port = XExpression)?
		composite = XExpression '-libpath' libpath = XExpression
		(=>
			hasService ?= ('-s' | '--service-name') service = XExpression
			hasMethod ?= ('-m' | '--method-name') method = XExpression
			(=> hasParams ?= '-p' params = XExpression)?
		)?
		(=> initializedLater ?= '...')?
	;

EvalCommand
	:	(=> 'on' uri = XExpression)? 'eval' script = XExpression
	;

CustomCommand
	:	'$' value = XExpression (=> initializedLater ?= '...')?
	;

CommandLiteral
	:	CdCommand
	|	CompileCommand
	|	CustomCommand
	|	RunCommand
	|	EvalCommand
	;

StringLiteral
	:	{StringLiteral} value = InterpolatedString;

InterpolatedString
	:
		{InterpolatedString} (expressions += TextLiteral)
	| 	(
			expressions += TextStartLiteral 
			(expressions += XExpression (expressions += TextMiddleLiteral expressions += XExpression)*)
			expressions += TextEndLiteral
		)
	;

TextLiteral
	:	{TextLiteral} value = TextVerbatimValue
	;

TextVerbatimValue returns ecore::EString
	:	TEXT
	;

TextStartLiteral
	:	{TextStartLiteral} value = TEXT_START
	;
	
TextMiddleLiteral
	:	{TextMiddleLiteral} value = TEXT_MIDDLE
	;
	
TextEndLiteral
	:	{TextEndLiteral} value = TEXT_END
	;

XLiteral returns xbase::XExpression
	:	XCollectionLiteral
	|	XClosure
	|	XBooleanLiteral
	|	XNumberLiteral
	|	XNullLiteral
	|	XTypeLiteral
	|	XStringLiteral
	|	CommandLiteral
	|	StringLiteral
	;

terminal TEXT
	:	"'" ('\\' . | !('\\' | "'" | '<' | '>') )* "'"
	;

terminal TEXT_START
	:	"'" ('\\' . | !('\\' | "'" | '<') )* '<'
	;

terminal TEXT_MIDDLE
	:	'>' ('\\' . | !('\\' | "'" | '<') )* '<'
	;

terminal TEXT_END
	:	'>' ('\\' . | !('\\' | "'" | '<') )* "'"
	;

terminal STRING
	:	'"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'?
	;
