/*
 * Copyright Â© 2015 Universidad Icesi
 * 
 * This file is part of the Amelia DSL.
 * 
 * The Amelia DSL is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at your
 * option) any later version.
 * 
 * The Amelia DSL is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License
 * for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public License
 * along with The Amelia DSL. If not, see <http://www.gnu.org/licenses/>.
 */
grammar org.amelia.dsl.Amelia with org.eclipse.xtext.xbase.Xbase

import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate amelia "http://www.amelia.org/dsl/Amelia"

Model
	:	('package' name = QualifiedName ->';'?)?
		typeDeclaration = TypeDeclaration?
	;

TypeDeclaration
	:	SubsystemDeclaration
	;

SubsystemDeclaration returns Subsystem
	:	includes = IncludeSection?
		'subsystem' name = ID body = SubsystemBlockExpression
	;

IncludeSection
	:	includeDeclarations += IncludeDeclaration+
	;

IncludeDeclaration
	:	'include' includedType = [TypeDeclaration | QualifiedName] ->';'?
	;

SubsystemBlockExpression returns xbase::XBlockExpression
	:	{SubsystemBlockExpression} '{' (expressions += InternalSubsystemDeclaration)* '}'
	;

InternalSubsystemDeclaration returns xbase::XExpression
	:	XVariableDeclaration ->';'?
	|	OnHostBlockExpression
	;

OnHostBlockExpression
	:	'on' host = XExpression '{' rules += RuleDeclaration* '}'
	;

RuleDeclaration returns xbase::XExpression
	:	{RuleDeclaration} name = ID ':' dependencies += [RuleDeclaration | ID]
	;

CdCommand
	:	'cd' directory = XExpression
	;

CompileCommand
	:	'compile' source = XExpression output = XExpression classpath = XExpression
	;

//Run
//	:	'run' hasPort ?= '-r' port = XExpression
//		composite = XExpression '-libpath' libpath = XExpression 
//		hasService ?= '-s' service = XExpression?
//		hasMethod ?= '-m' method = XExpression?
//	;

CustomCommand
	:	'$' value = XExpression
	;

CommandLiteral
	:	CdCommand
	|	CompileCommand
	|	CustomCommand
//	|	Run
	;

StringLiteral
	:	{StringLiteral} value = InterpolatedString;

InterpolatedString
	:
		{InterpolatedString} (expressions += TextLiteral)
	| 	(
			expressions += TextStartLiteral 
			(expressions += XExpression (expressions += TextMiddleLiteral expressions += XExpression)*)
			expressions += TextEndLiteral
		)
	;

TextLiteral
	:	{TextLiteral} value = TextVerbatimValue
	;

TextVerbatimValue returns ecore::EString
	:	TEXT
	;

TextStartLiteral
	:	{TextStartLiteral} value = TEXT_START
	;
	
TextMiddleLiteral
	:	{TextMiddleLiteral} value = TEXT_MIDDLE
	;
	
TextEndLiteral
	:	{TextEndLiteral} value = TEXT_END
	;

XLiteral returns xbase::XExpression
	:	XCollectionLiteral
	|	XClosure
	|	XBooleanLiteral
	|	XNumberLiteral
	|	XNullLiteral
	|	XStringLiteral
	|	XTypeLiteral
	|	CommandLiteral
	|	StringLiteral
	;

terminal TEXT
	:	"'" ('\\' . | !('\\' | "'" | '{' | '}') )* "'"
	;

terminal TEXT_START
	:	"'" ('\\' . | !('\\' | "'" | '{') )* '{'
	;

terminal TEXT_MIDDLE
	:	'}' ('\\' . | !('\\' | "'" | '{') )* '{'
	;

terminal TEXT_END
	:	'}' ('\\' . | !('\\' | "'" | '{') )* "'"
	;

terminal STRING
	:	'"' ( '\\' . /* ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') */ | !('\\'|'"') )* '"'?
	;

terminal SL_COMMENT
	:	'--' !('\n'|'\r')* ('\r'? '\n')?
	;
